#include "global.inc"

layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec2 vertex_texcoord;
layout(location = 2) in vec3 vertex_normal;
layout(location = 3) in vec4 vertex_color;
layout(location = 4) in vec3 vertex_binormal;
layout(location = 5) in vec3 vertex_tangent;

out vs_output
{
  vec4 color;
  vec3 cubecoord;

  vec3 normal;
  vec3 tangent;
  vec3 binormal;

  vec2 texcoord;
} result;

void main(void)
{
  gl_Position = rpProjectionMatrix * rpModelViewMatrix * vec4(vertex_position, 1.0);  
  
  vec4 cubecoord = vec4(vertex_position - rpLocalViewOrigin.xyz, 1.0);
  result.cubecoord = cubecoord.xyz;
  
  result.normal = (rpModelMatrix * vec4(vertex_normal, 1.0)).xyz;
  result.tangent = (rpModelMatrix * vec4(vertex_tangent, 1.0)).xyz;
  result.binormal = (rpModelMatrix * vec4(vertex_binormal, 1.0)).xyz;

  vec4 vertex_texcoord4 = vec4(vertex_texcoord, 1.0, 1.0);
  result.texcoord.x = dot(rpBumpMatrixS, vertex_texcoord4);
  result.texcoord.y = dot(rpBumpMatrixT, vertex_texcoord4);

  result.color = (vertex_color / 255.0) * rpColorModulate + rpColorAdd;
}

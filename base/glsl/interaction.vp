#include "global.inc"

layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec2 vertex_texcoord;
layout(location = 2) in vec3 vertex_normal;
layout(location = 3) in vec4 vertex_color;
layout(location = 4) in vec3 vertex_binormal;
layout(location = 5) in vec3 vertex_tangent;

out vs_output
{
  vec4 color;
  vec2 texNormal;
  vec2 texDiffuse;
  vec2 texSpecular;
  vec4 texLight;
  vec3 L;
  vec3 V;
  vec3 H;
  vec4 shadow[6];
  vec3 toLightOrigin;
  float depth;
  vec4 worldspacePosition;
} result;

void main(void)
{ 
  gl_Position = rpProjectionMatrix * rpModelViewMatrix * vec4(vertex_position, 1.0);

  vec4 vertex_texcoord4 = vec4(vertex_texcoord, 1.0, 1.0);

  result.texNormal.x = dot(rpBumpMatrixS, vertex_texcoord4);
  result.texNormal.y = dot(rpBumpMatrixT, vertex_texcoord4);

  result.texDiffuse.x = dot(rpDiffuseMatrixS, vertex_texcoord4);
  result.texDiffuse.y = dot(rpDiffuseMatrixT, vertex_texcoord4);

  result.texSpecular.x = dot(rpSpecularMatrixS, vertex_texcoord4);
  result.texSpecular.y = dot(rpSpecularMatrixT, vertex_texcoord4);

  vec4 vertex_position4 = vec4(vertex_position, 1.0);
  result.texLight.x = dot(rpLightProjectionS, vertex_position4);
  result.texLight.y = dot(rpLightProjectionT, vertex_position4);
  result.texLight.z = dot(rpLightFallOff, vertex_position4);
  result.texLight.w = dot(rpLightProjectionQ, vertex_position4);

  vec3 L = rpLocalLightOrigin.xyz - vertex_position.xyz;
  vec3 V = rpLocalViewOrigin.xyz - vertex_position.xyz;
  vec3 H = L+V;

  mat3 M = mat3(vertex_tangent, vertex_binormal, vertex_normal);

  result.L = L * M;
  result.V = V * M;
  result.H = H * M;

  result.color = (vertex_color / 255.0) * rpColorModulate + rpColorAdd;  

  vec4 worldspace_position = rpModelMatrix * vec4(vertex_position, 1.0); 
  result.worldspacePosition = worldspace_position;
  
  if(rpShadowMappingMode == 1)
  {
    result.shadow[0] = rpPointlightProjection[0] * worldspace_position;
    result.shadow[1] = rpPointlightProjection[1] * worldspace_position;
    result.shadow[2] = rpPointlightProjection[2] * worldspace_position;
    result.shadow[3] = rpPointlightProjection[3] * worldspace_position;
    result.shadow[4] = rpPointlightProjection[4] * worldspace_position;
    result.shadow[5] = rpPointlightProjection[5] * worldspace_position;    
  }
  else if(rpShadowMappingMode == 2)
  {
    result.shadow[0] = rpSpotlightProjection * worldspace_position;        
  }  
  else if(rpShadowMappingMode == 3) 
  {
    result.shadow[0] = rpPointlightProjection[0] * worldspace_position;
    result.shadow[1] = rpPointlightProjection[1] * worldspace_position;
    result.shadow[2] = rpPointlightProjection[2] * worldspace_position;
    result.shadow[3] = rpPointlightProjection[3] * worldspace_position;
    result.shadow[4] = rpPointlightProjection[4] * worldspace_position;
    result.shadow[5] = rpPointlightProjection[5] * worldspace_position;    
    result.depth = (rpModelViewMatrix * vec4(vertex_position, 1.0)).z;
  }

  result.toLightOrigin = (rpInverseLightRotation * (worldspace_position - rpGlobalLightOrigin)).xyz;
}
